#include "../include/Odometer.h"
#include "../include/exponent_list.h"
#include "../include/reliable_witness_lchen.h"
#include "../include/tab_psp.h"
#include <iostream>
#include <vector>
#include <cstdlib>
#include <NTL/ZZ.h>
#include <NTL/RR.h>
using namespace std;

NTL_CLIENT

int main() {
	vector<long> expo_gen;
	// vector<long> comps_list;
	vector<long> comps_set;
	// long arr[] = {1,2,3}; // exponent list 
	long exponent = 1;
	long arr2[] = {3, 5, 7, 11}; // bases
	int ifwit;
	int arr2_size = sizeof(arr2)/sizeof(arr2[0]);
	vector<bool> a;
	vector<bool> ifreliable;
	vector<int> prev_height;
	prev_height.push_back(0);

	// vector<long> exponents (arr, arr + sizeof(arr) / sizeof(arr[0]) );
	vector<long> comp_bases (arr2, arr2 + sizeof(arr2) / sizeof(arr2[0]) );
	for (int i = 0; i < comp_bases.size(); i++) {
		expo_gen.push_back(exponent);
	}

	for (int i = 0; i < 10; i++) {
		long bound = 1;

		for (int j = 0; j < arr2_size; j++) {
			bound = bound * pow(arr2[j], exponent);
		}

		cout << "the bound is: " << bound << endl;

		BoundGen2(expo_gen, comp_bases, exponent);
		cout << "now the exponents are: ";
		for (int k = 0; k < expo_gen.size(); k++) {
			cout << expo_gen.at(k) << " ";
		}
		cout << endl;

		OdometerGen(expo_gen, comp_bases, comps_set, prev_height);

		cout << "after calling OdometerGem, the size of the comps_set is " << comps_set.size() << endl;
		cout << "test reliable witness... " << endl;

		NewNaiveReliableWitness(bound, comps_set, a, ifreliable);

		if (ifreliable.at(0) == 0) {
			cout << "this set doesn't have reliable witness." << endl;
			cout << "the exponents are " << exponent << endl;
			break;
		}
		else {
			//cout << "Increase the bound of a ..." << endl; 
			// Instead of increase the bound of a, we can add a base-a spsp to comps_set,
			// then test the percentage of reliable witness again.
			// The first a-based spsp can be generated by modified version of TrivialStrongTab
			// in tab_psp.cpp. 
			long base_set[] = {2, 3, 5, 7, 11, 13, 17};
			int base_set_size = sizeof(base_set)/sizeof(base_set[0]);
			cout << "the size of base_set is" << base_set_size << endl;
			long spsp_bound = 10000000;
			for (int i = 0; i < base_set_size; i++) {
				long first_i_spsp = FirstStrongTab(base_set[i], spsp_bound);
				if (first_i_spsp == 0) {
					continue;
				}
				cout << "add a base-" << base_set[i] <<" spsp " << first_i_spsp << " to comps_set" << endl;
				comps_set.push_back(first_i_spsp);
				NewNaiveReliableWitness(bound, comps_set, a, ifreliable);
			}
		}

		cout << "now increase the bound.." << endl;
		exponent = exponent + 1;
		comps_set.clear();
	}
	
	return 1; 
}