Here's a table that counts the number of integers up to x with only 1 Fermat liar.  Erdos and Pomerance claim this should be e^{-\gamma}x/logloglog x but I'm not so sure.

Note that e^{-\gamma} is 0.561459 and e^{1-\gamma} is 1.5262 but the data is showing a constant closer to .34 or so.

x	Num with 1 Liar		Num * logloglog x

10^1	5			-0.907414871
10^2 	45			19.05401936
10^3	398			262.2379785
10^4	3665			2923.403358
10^5	34832			31119.58129
10^6	335833			324207.312
10^7	3266124			3339384.069
10^8	31942862		34157977.43

Next is a table that counts the number of integers up to x with 2 strong
liars.

x	Num with 2 liars	Num * logloglog x

10^2	21			8.891875702
10^3	243			160.1101226
10^4	2553			2036.411671
10^5	25955			23188.6981
10^6	261280			252235.148
10^7	2616237			2674919.923

Next is a table that counts integers up to x with 1 or 2 strong liars

x	Num with 1 or 2 liars	Num * logloglog x

10^2	66			27.94589506
10^3	641			422.3481011
10^4	6218			4959.815029
10^5	60787			54308.27939
10^6	597113			576442.46
10^7	5882361			6014303.992

Here is another table that counts number of odd integers up to x with 2 strong
liars.  It uses a sieve strategy that is more efficient.

x	Num with 2 liars	Num * logloglog x	time in seconds (on node)

10^3	243			160.1101226
10^4	2553			2036.411671
10^5	25955			23188.6981
10^6	261280			252235.148
10^7	2616237			2674919.923		9
10^8	26140023		27952733.72		100
10^9	260899381		289331515.2		1027
